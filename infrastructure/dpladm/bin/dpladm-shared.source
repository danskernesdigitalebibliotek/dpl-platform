#!/usr/bin/env bash
set -euo pipefail

ENVIRONMENT_REPO_ORG=danishpubliclibraries
LAGOON_IMAGES_RELEASE_TAG="24.1.0"

# Echo the second argument Exit 1 if the first argument is not 0
# Use this function to process $? after an invocation of something that might
# return a non-zero exitcode.
function failOnErr {
  if [[ ! $1 -eq 0 ]]; then
    echo "${2}"
    exit 1
  fi
}

function getRepoName {
  echo "env-${1}"
}

# Get the absolute path to a profile template directory
function getProfileTemplatePath {
  local profile=$1

  local scriptDir
  scriptDir="$( cd "$( dirname "${BASH_SOURCE[0]}" )" && pwd )"


  local relativePath="${scriptDir}/../env-repo-template/$profile"
  local profileTemplatePath
  profileTemplatePath=$(realpath "${relativePath}")
  if [[ ! -d "${profileTemplatePath}" ]]; then
    # If we run in to problems, make sure to output the relative path as it
    # will be more informative.
    echo "Could not find profile template at ${relativePath}"
    exit 1
  fi

  echo "${profileTemplatePath}"
}

# Get the absolute path to the directory we should be using for our work.
# Will make sure the directory exists and that it is empty.
function getCleanWorkspacePath {
  # TODO, we could be using a real tempdir here, but for now it seems like a
  # good idea to have the files lying around after the run for easier debugging.
  local scriptDir
  scriptDir="$( cd "$( dirname "${BASH_SOURCE[0]}" )" && pwd )"
  local workspacePath
  workspacePath=$(realpath "${scriptDir}/../workspace")
  # Clear out any existing directory.
  if [[ -d "${workspacePath}" ]]; then
    rm -fr "${workspacePath}"
  fi
  mkdir -p "${workspacePath}"
  echo "${workspacePath}"
}

# This function assumes working directory is in a root of a un-rendered profile template.s
function renderProfileTemplate {
  # Name of the site
  local siteName=$1
  # Env of the site
  local siteEnv=$2
  # Which dpl-cms release to use.
  local releaseTag=$3
  # Image registry to pull the release from
  local releaseImageRepository=$4
  # Name of the container-image that contains the built release
  local releaseImageName=$5
  # Cron schedule for importing translations
  local importTranslationsCron=$6
  # Flag for whether or not to autogenerate routes
  local autogenerateRoutes=${7:-}
  # The primary domain of the site (optional)
  local primaryDomain=${8:-}
  # A space-seperated list of secondary domains (optional)
  local secondaryDomainsString=${9:-}
  # The desired size of the Persistent Volume
  local diskSize=${10:-}
  # The primary GO subdomain (optional)
  local primaryGoSubDomain=${11:-}
  # A space seperated list of secondary GO sub domains (optional)
  local secondaryGoSubDomains=${12:-}
  #GO release version
  local GO_RELEASE=${13:-}

  PRIMARY_DOMAIN=""

  if [[ "${autogenerateRoutes}" == "redirect" ]]; then
    autogenerateRoutes="false"
    secondaryDomainsString="${secondaryDomainsString} varnish.main.${siteName}.dplplat01.dpl.reload.dk nginx.main.${siteName}.dplplat01.dpl.reload.dk"
  fi

  if [[ -z "${autogenerateRoutes}" && -n "${primaryDomain}" ]]; then
    autogenerateRoutes="false"
  fi

  if [[ -z "${autogenerateRoutes}" ]]; then
    autogenerateRoutes="true"
  fi

  # This is a little bit terrible. As we're injecting this into a yaml-
  # document we need to maintain the indentation
  local routesIndent="    "
  local singleRouteIndent="${routesIndent}    "

  ENABLE_ROUTES=$(cat << EndOfMessage
${routesIndent}autogenerateRoutes: ${autogenerateRoutes}
EndOfMessage
)
  if [[ -n "${primaryDomain}" ]]; then
    ENABLE_ROUTES=$(cat << EndOfMessage
${routesIndent}autogenerateRoutes: ${autogenerateRoutes}
${routesIndent}routes:
${routesIndent}  - varnish:
EndOfMessage
)
    PRIMARY_DOMAIN="${singleRouteIndent}- \"${primaryDomain}\""
  fi


  # Only render secondary domains if we have a primary domain.
  SECONDARY_DOMAINS=""
  if [[ -n "${primaryDomain}" && -n "${secondaryDomainsString}" ]]; then
    IFS=' '
    for secondaryDomain in ${secondaryDomainsString}; do
      SECONDARY_DOMAINS+=$(cat << EndOfMessage

${singleRouteIndent}- "$secondaryDomain":
${singleRouteIndent}    annotations:
${singleRouteIndent}      nginx.ingress.kubernetes.io/permanent-redirect: https://${primaryDomain}\$request_uri
EndOfMessage
)
    done
  fi

  # Only if the project uses the GO module
  PRIMARY_GO_SUBDOMAIN_AND_ANNOTATION=""
  if [[ -n "${primaryGoSubDomain}" ]]; then
    PRIMARY_GO_SUBDOMAIN_AND_ANNOTATION=$(cat << EndOfMessage
${routesIndent}  - node:
${singleRouteIndent}- "$primaryGoSubDomain":
${singleRouteIndent}    annotations:
${singleRouteIndent}      nginx.ingress.kubernetes.io/proxy-buffer-size: 32k
EndOfMessage
)
  fi

  SECONDARY_GO_SUBDOMAINS=""
  if [[ -n "${primaryGoSubDomain}" && -n " ${secondaryGoSubDomains}" ]]; then
    IFS=' '
    for secondaryGoSubDomain in ${secondaryGoSubDomains}; do
      SECONDARY_GO_SUBDOMAINS+=$(cat << EndOfMessage

${singleRouteIndent}- "$secondaryGoSubDomain":
${singleRouteIndent}    annotations:
${singleRouteIndent}      nginx.ingress.kubernetes.io/permanent-redirect: https://${primaryGoSubDomain}\$request_uri
EndOfMessage
)
    done
  fi


  # TODO, we could probably do with a repo-wide search replace of variables.
  # Something https://github.com/kreuzwerker/envplate could do the trick
  # Export our globals and locals so that envubst can access them
  export RELEASE_IMAGE_REPOSITORY=${releaseImageRepository}
  export RELEASE_IMAGE_NAME=${releaseImageName}
  export RELEASE_TAG="${releaseTag}"
  export ENABLE_ROUTES
  export LAGOON_PROJECT_NAME="${siteName}"
  export LAGOON_ENVIRONMENT="${siteEnv}"
  export LAGOON_IMAGES_RELEASE_TAG
  export PRIMARY_DOMAIN
  export SECONDARY_DOMAINS
  export PRIMARY_GO_SUBDOMAIN_AND_ANNOTATION
  export SECONDARY_GO_SUBDOMAINS
  export IMPORT_TRANSLATIONS_CRON=${importTranslationsCron}
  export GO_RELEASE
  export PRIMARY_GO_DOMAIN="${primaryGoSubDomain}"
  export CMS_DOMAIN="${primaryDomain}"
  export DISK_SIZE="${diskSize}"

  # TODO this templating could be quite a bit more flexible.
  # Tell envsubst which variables to replace. This allows other variables to
  # remain untouched.
  # shellcheck disable=SC2016
  local variablesToSubst='$RELEASE_IMAGE_REPOSITORY $RELEASE_IMAGE_NAME $RELEASE_TAG $ENABLE_ROUTES $LAGOON_IMAGES_RELEASE_TAG $LAGOON_PROJECT_NAME $LAGOON_ENVIRONMENT $PRIMARY_DOMAIN $SECONDARY_DOMAINS $IMPORT_TRANSLATIONS_CRON $PRIMARY_GO_SUBDOMAIN_AND_ANNOTATION $SECONDARY_GO_SUBDOMAINS $GO_RELEASE $PRIMARY_GO_DOMAIN $CMS_DOMAIN $DISK_SIZE'

  # Loop through the files we know to contain variables that needs replacing.
  local templateFiles=(
    "docker-compose.base-services.yml"
    "docker-compose.node-service.yml"
    ".lagoon.yml"
    "lagoon/cli.dockerfile"
    "lagoon/nginx.dockerfile"
    "lagoon/php.dockerfile"
    "lagoon/conf/nginx/metrics/version.txt"
    "lagoon/conf/nginx/metrics/version.json"
    "README.md"
  )
  if [ -n "$GO_RELEASE" ]; then
    # Add this to the template list
    templateFiles+=("lagoon/node.dockerfile")
  else
    rm lagoon/node.dockerfile
  fi

  for templateFile in "${templateFiles[@]}"
  do
      envsubst "${variablesToSubst}" < "${templateFile}" > "${templateFile}.render"
      mv "${templateFile}.render" "${templateFile}"
  done

}

# Renders the contents of a sites environment repository and pushes the result.
function syncEnvRepo {
  local siteName=$1
  local releaseTag=$2
  local branchName=$3
  local releaseImageRepository=$4
  local releaseImageName=$5
  local importTranslationsCron=$6
  local autogenerateRoutes="${7:-}"
  local primaryDomain="${8:-}"
  local secondaryDomains="${9:-}"
  local diskSize="${10:-}"
  local primaryGoSubDomain="${11:-}"
  local secondaryGoSubDomains="${12:-}"
  local goRelease="${13:-}"

  if [[ -z $siteName ]]; then
      echo "Missing site name"
      exit 1
  fi

  if [[ -z $releaseTag ]]; then
      echo "Missing release tag"
      exit 1
  fi

  if [[ -z $branchName ]]; then
      echo "Missing branch name"
      exit 1
  fi

  if [[ -z $releaseImageRepository ]]; then
      echo "Missing release image repository"
      exit 1
  fi

  if [[ -z $releaseImageName ]]; then
      echo "Missing release image name"
      exit 1
  fi

  # TODO, preflight checks that verifies this repository looks good to go.
  # makes most sense to do when we're doing more complicated things inside
  # the repository. At the very least we should verify that this actually
  # looks like an environment-repo.

  # TODO
  local repoTemplate="standard"

  local repoName
  repoName=$(getRepoName "${siteName}")

  # Move in to our workspace.
  local workspace
  workspace="$(getCleanWorkspacePath)"
  cd "${workspace}"

  # Fetch a clone of the environment repo.
  local repoPath="${ENVIRONMENT_REPO_ORG}/${repoName}"
  echo "** Cloning branch ${branchName} of env-repo ${repoPath} for ${siteName}"
  # TODO: consider adding --single-branch flag to make cloning faster
  git clone --depth 1 "https://${GITHUB_TOKEN}@github.com/${repoPath}.git" -b "${branchName}"

  # Clear out any previous content and replace it with a unrendered template.
  mv "${repoName}/.git" ./
  rm -fr "${repoName}"
  cp -r "$(getProfileTemplatePath $repoTemplate)" "${repoName}"
  mv .git "${repoName}"
  # We now have a repository with a diff from <previous revision>...<unrendered template>

  # Enter the template and rendered it
  cd "${repoName}"
  renderProfileTemplate "${siteName}" "${branchName}" "${releaseTag}" "${releaseImageRepository}" "${releaseImageName}" "${importTranslationsCron}" "${autogenerateRoutes}" "${primaryDomain}" "${secondaryDomains}" "${diskSize}" "${primaryGoSubDomain}" "${secondaryGoSubDomains}" "${goRelease}"

  # If we have GO use the docker-compose which set the node service
  if [ "$goRelease" ]; then
    # If we're deploying a site with GO project, we want the docker-compose with the node service defined
    rm docker-compose.base-services.yml
    cp docker-compose.node-service.yml docker-compose.yml
    rm docker-compose.node-service.yml
  elif [ -z "$goRelease" ] || [ "$goRelease" = "" ]; then
    # If we are deploying a site which doesn't have the GO project, use the base-services docker-compose file
    rm docker-compose.node-service.yml
    cp docker-compose.base-services.yml docker-compose.yml
    rm docker-compose.base-services.yml
  fi

  # Detect changes
  local changedFiles
  changedFiles="$(git status --porcelain)"
  if [[ -z "${changedFiles}" && "${FORCE:-}" != "1" ]]; then
    echo "No changes found."
    return
  fi

  # Our diff should now be minimal, potentially only the updated tag.
  # First store the sha for potential diffing
  local previousSha
  previousSha="$(git rev-parse HEAD)"

  if [[ -n "${changedFiles}" ]]; then
    git add .
    git commit -m "Syncing site to release ${releaseTag} on ${branchName}"
  else
    git commit --allow-empty -m "Syncing site to release ${releaseTag} on ${branchName} (no changes)"
  fi

  local newSha
  newSha="$(git rev-parse HEAD)"

  if [[ "${DIFF:-}" == "1" ]]; then
    echo "In diff-mode, skipping push."
    echo
    echo "Git diff between ${previousSha} and ${newSha}:"
    git --no-pager diff "${previousSha}...${newSha}"
    echo
    echo "You can inspect the unpushed repository here: ${workspace}/${repoName}"
    return
  fi

  # Push the result.
  git push origin "${branchName}"
}

function print_usage {
    # Start with a more specific error-message if we're passed the name of a
    # variable that was missing.
    if [[ -n "${1:-}" ]]; then
        echo "Could not find the variable ${1}"
    fi
    echo
    echo "Set the following environment variables before running the script."
    echo "  SITES_CONFIG: path to the sites.yaml that should be used for site configuration"
    echo "  SITE:         the sites key in sites.yaml"
    echo ""
    echo "  FORCE:  Push even if there is no diff in which case an empty"
    echo "          commit will be pushed."

    exit 1
}

function getSitePlan {
    local plan
    plan=$(yq eval ".sites.${1}.plan" "${2}")
    if [[ "${plan}" == "null" ]]; then
        echo "standard"
        return
    fi

    echo "${plan}"
    return
}

function setUpHorizontalAutoscaler {
  local siteName=$1
  local SITES_CONFIG=$2
  local plan=$(getSitePlan "${siteName}" "${SITES_CONFIG}")

  local workspace
  workspace="$(getCleanWorkspacePath)"
  cd "${workspace}"

  renderAutoscalers "${siteName}" "${plan}"
  kubectl apply --recursive -f autoscalers
}

function renderAutoscalers {
  local siteName=$1
  local plan=$2

  local scriptDir
  scriptDir="$( cd "$( dirname "${BASH_SOURCE[0]}" )" && pwd )"

  mkdir autoscalers

  local envs=(
    "main"
  )

  if [ "$plan" = "webmaster" ]; then
    local envs=(
      "main"
      "moduletest"
    )
  fi

  for env in "${envs[@]}"; do
    export SITE_NAME="$siteName";
    export SITE_ENV="$env";
    envsubst '$SITE_NAME $SITE_ENV' < "${scriptDir}/../php-nginx-hpa.template.yaml" > "autoscalers/$env-nginx-hpa.yaml";
    envsubst '$SITE_NAME $SITE_ENV' < "${scriptDir}/../vpa-templates/nginx-vpa.template.yaml" > "autoscalers/$env-nginx-vpa.yaml";
    envsubst '$SITE_NAME $SITE_ENV' < "${scriptDir}/../vpa-templates/cli-vpa.template.yaml" > "autoscalers/$env-cli-vpa.yaml";
    envsubst '$SITE_NAME $SITE_ENV' < "${scriptDir}/../vpa-templates/redis-vpa.template.yaml" > "autoscalers/$env-redis-vpa.yaml";
    envsubst '$SITE_NAME $SITE_ENV' < "${scriptDir}/../vpa-templates/varnish-vpa.template.yaml" > "autoscalers/$env-varnish-vpa.yaml";
  done
}
